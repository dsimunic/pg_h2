module Tests exposing (all)

import Bytes.Decode as Bytes
import Expect
import Hex
import Postgres.Decode exposing (decodeResultset, decodeResponseRaw)
import Test exposing (..)



-- Check out http://package.elm-lang.org/packages/elm-community/elm-test/latest to learn more about testing in Elm!


all : Test
all =
    describe "Postgres.Decode Test Suite"
        [ test "Decode row description only" <|
            \_ ->
                let
                    oneRow =
                        Hex.toBytes <|
                            "54000001d200116e616d650000002d94000100000019ffffffffffff000173657474696e670000002d94000200000019ffffffffffff0001756e69740000002d94000300000019ffffffffffff000163617465676f72790000002d94000400000019ffffffffffff000173686f72745f646573630000002d94000500000019ffffffffffff000165787472615f646573630000002d94000600000019ffffffffffff0001636f6e746578740000002d94000700000019ffffffffffff0001766172747970650000002d94000800000019ffffffffffff0001736f757263650000002d94000900000019ffffffffffff00016d696e5f76616c0000002d94000a00000019ffffffffffff00016d61785f76616c0000002d94000b00000019ffffffffffff0001656e756d76616c730000002d94000c000003f1ffffffffffff0001626f6f745f76616c0000002d94000d00000019ffffffffffff000172657365745f76616c0000002d94000e00000019ffffffffffff0001736f7572636566696c650000002d94000f00000019ffffffffffff0001736f757263656c696e650000002d940010000000170004ffffffff000170656e64696e675f726573746172740000002d940011000000100001ffffffff0001"

                    rs =
                        Maybe.andThen decodeResultset oneRow
                in
                case rs of
                    Just result ->
                        Expect.equal ( 17, 0 ) ( List.length result.fields, List.length result.rows )

                    Nothing ->
                        Expect.fail "Could not successfully decode the test response."
        , test "Decode rows only, without description" <|
            \_ ->
                let
                    oneRow =
                        Hex.toBytes <|
                            "44000000c8001100000017616c6c6f775f73797374656d5f7461626c655f6d6f6473000000036f6666ffffffff00000011446576656c6f706572204f7074696f6e7300000037416c6c6f7773206d6f64696669636174696f6e73206f662074686520737472756374757265206f662073797374656d207461626c65732effffffff0000000a706f73746d617374657200000004626f6f6c0000000764656661756c74ffffffffffffffffffffffff000000036f6666000000036f6666ffffffffffffffff0000000100"

                    rs =
                        Maybe.andThen decodeResultset oneRow
                in
                case rs of
                    Just result ->
                        Expect.equal ( 0, 1 ) ( List.length result.fields, List.length result.rows )

                    Nothing ->
                        Expect.fail "Could not successfully decode the test response."
        , test "Decode row description and two rows" <|
            \_ ->
                let
                    twoRows =
                        Hex.toBytes <|
                            "54000001d200116e616d650000002d94000100000019ffffffffffff000173657474696e670000002d94000200000019ffffffffffff0001756e69740000002d94000300000019ffffffffffff000163617465676f72790000002d94000400000019ffffffffffff000173686f72745f646573630000002d94000500000019ffffffffffff000165787472615f646573630000002d94000600000019ffffffffffff0001636f6e746578740000002d94000700000019ffffffffffff0001766172747970650000002d94000800000019ffffffffffff0001736f757263650000002d94000900000019ffffffffffff00016d696e5f76616c0000002d94000a00000019ffffffffffff00016d61785f76616c0000002d94000b00000019ffffffffffff0001656e756d76616c730000002d94000c000003f1ffffffffffff0001626f6f745f76616c0000002d94000d00000019ffffffffffff000172657365745f76616c0000002d94000e00000019ffffffffffff0001736f7572636566696c650000002d94000f00000019ffffffffffff0001736f757263656c696e650000002d940010000000170004ffffffff000170656e64696e675f726573746172740000002d940011000000100001ffffffff0001"
                                ++ "44000000c8001100000017616c6c6f775f73797374656d5f7461626c655f6d6f6473000000036f6666ffffffff00000011446576656c6f706572204f7074696f6e7300000037416c6c6f7773206d6f64696669636174696f6e73206f662074686520737472756374757265206f662073797374656d207461626c65732effffffff0000000a706f73746d617374657200000004626f6f6c0000000764656661756c74ffffffffffffffffffffffff000000036f6666000000036f6666ffffffffffffffff0000000100"
                                ++ "44000000e80011000000106170706c69636174696f6e5f6e616d650000000d6e6f6e6f6465406e6f686f7374ffffffff000000235265706f7274696e6720616e64204c6f6767696e67202f205768617420746f204c6f67000000405365747320746865206170706c69636174696f6e206e616d6520746f206265207265706f7274656420696e207374617469737469637320616e64206c6f67732effffffff000000047573657200000006737472696e6700000006636c69656e74ffffffffffffffffffffffff000000000000000d6e6f6e6f6465406e6f686f7374ffffffffffffffff0000000100"

                    rs =
                        Maybe.andThen decodeResultset twoRows
                in
                case rs of
                    Just { fields, rows } ->
                        Expect.equal ( 17, 2 ) ( List.length fields, List.length rows )

                    Nothing ->
                        Expect.fail "Could not successfully decode the test response."
        , test "Decode raw row description and two rows" <|
            \_ ->
                let
                    twoRows =
                        Hex.toBytes <|
                            "54000001d200116e616d650000002d94000100000019ffffffffffff000173657474696e670000002d94000200000019ffffffffffff0001756e69740000002d94000300000019ffffffffffff000163617465676f72790000002d94000400000019ffffffffffff000173686f72745f646573630000002d94000500000019ffffffffffff000165787472615f646573630000002d94000600000019ffffffffffff0001636f6e746578740000002d94000700000019ffffffffffff0001766172747970650000002d94000800000019ffffffffffff0001736f757263650000002d94000900000019ffffffffffff00016d696e5f76616c0000002d94000a00000019ffffffffffff00016d61785f76616c0000002d94000b00000019ffffffffffff0001656e756d76616c730000002d94000c000003f1ffffffffffff0001626f6f745f76616c0000002d94000d00000019ffffffffffff000172657365745f76616c0000002d94000e00000019ffffffffffff0001736f7572636566696c650000002d94000f00000019ffffffffffff0001736f757263656c696e650000002d940010000000170004ffffffff000170656e64696e675f726573746172740000002d940011000000100001ffffffff0001"
                                ++ "44000000c8001100000017616c6c6f775f73797374656d5f7461626c655f6d6f6473000000036f6666ffffffff00000011446576656c6f706572204f7074696f6e7300000037416c6c6f7773206d6f64696669636174696f6e73206f662074686520737472756374757265206f662073797374656d207461626c65732effffffff0000000a706f73746d617374657200000004626f6f6c0000000764656661756c74ffffffffffffffffffffffff000000036f6666000000036f6666ffffffffffffffff0000000100"
                                ++ "44000000e80011000000106170706c69636174696f6e5f6e616d650000000d6e6f6e6f6465406e6f686f7374ffffffff000000235265706f7274696e6720616e64204c6f6767696e67202f205768617420746f204c6f67000000405365747320746865206170706c69636174696f6e206e616d6520746f206265207265706f7274656420696e207374617469737469637320616e64206c6f67732effffffff000000047573657200000006737472696e6700000006636c69656e74ffffffffffffffffffffffff000000000000000d6e6f6e6f6465406e6f686f7374ffffffffffffffff0000000100"

                    rs =
                        Maybe.andThen decodeResponseRaw twoRows
                in
                case rs of
                    Just result ->
                        Expect.equal 3 (List.length result)

                    Nothing ->
                        Expect.fail "Could not successfully decode the test response."
        ]
